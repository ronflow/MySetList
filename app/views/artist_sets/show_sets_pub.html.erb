<!--
  VIEW: Buscar e Inserir M√∫sicas do Banco de Dados no Set
  Controller: ArtistSetsController
  Action: show_sets_pub
-->

<%# Vari√°vel de conveni√™ncia %>
<% artist = @artist_set.artist %>

<!-- MENSAGENS DE FEEDBACK -->
<p style="color: green"><%= notice %></p>
<p style="color: red"><%= alert %></p>

<!-- CABE√áALHO -->
<div>
  <h1>üìã Buscar e Inserir do Banco de Dados</h1>
  <h2><%= @artist_set.set_list_name %></h2>

  <% if @artist_set.set_tags.present? %>
    <div style="margin-bottom: 15px;">
      <strong>Tags:</strong>
      <% @artist_set.set_tags.split(',').map(&:strip).each do |tag| %>
        <span style="background-color: #e9ecef; color: #495057; padding: 4px 8px; border-radius: 4px; font-size: 14px; margin-right: 5px;">
          <%= tag %>
        </span>
      <% end %>
    </div>
  <% end %>
</div>

<div>
  <%= link_to "Voltar para Setlists", artist_path(artist), role: "button" %>
</div>

<hr>

<!-- SE√á√ÉO 1: M√öSICAS ATUAIS NO SET -->
<h2>M√∫sicas no Setlist (<%= @songs.count %>)</h2>

<%= form_with url: show_sets_pub_artist_artist_set_path(artist, @artist_set), method: :get, local: true do %>
  <%= label_tag :search_set, "Buscar m√∫sicas no set" %>
  <%= text_field_tag :search_set, params[:search_set] %>
  <%= submit_tag "Buscar", role: "button" %>
<% end %>

<br>

<% if @songs.present? %>
  <!-- Controles de ordena√ß√£o (client-side) -->
  <div style="margin-bottom:8px;">
    <label for="sort-current-songs" style="margin-right:8px;">Ordenar por:</label>
    <select id="sort-current-songs" style="padding:4px 8px;">
      <option value="inserted">Ordem de inser√ß√£o</option>
      <option value="name_asc" <%= 'selected' if params[:sort] == 'name_asc' %>>M√∫sica (A ‚Üí Z)</option>
      <option value="name_desc" <%= 'selected' if params[:sort] == 'name_desc' %>>M√∫sica (Z ‚Üí A)</option>
      <option value="band_asc" <%= 'selected' if params[:sort] == 'band_asc' %>>Banda (A ‚Üí Z)</option>
      <option value="band_desc" <%= 'selected' if params[:sort] == 'band_desc' %>>Banda (Z ‚Üí A)</option>
    </select>
  </div>

  <div style="max-height: 400px; overflow-y: auto; border: 1px solid #ccc;">
    <table id="current-songs-table">
      <thead>
        <tr>
          <th>M√∫sica</th>
          <th>Banda</th>
          <th>Dura√ß√£o</th>
          <th>Status</th>
          <th>A√ß√µes</th>
        </tr>
      </thead>
      <tbody>
        <% @songs.each_with_index do |song, idx| %>
          <% artist_song = @artist_songs_map ? @artist_songs_map[song.id] : artist.artist_songs.find_by(song: song) %>
          <tr data-name="<%= song.name.to_s.downcase %>"
              data-band="<%= song.band.to_s.downcase %>"
              data-index="<%= idx %>">
            <td><strong><%= song.name %></strong></td>
            <td><%= song.band %></td>
            <td>
              <% if artist_song&.duracao.present? %>
                <span style="color: inherit;"><%= artist_song.duracao %></span>
              <% else %>
                <span style="color: #6c757d; font-size: 12px;">-</span>
              <% end %>
            </td>
            <td>
              <% if artist_song %>
                <span style="color: green;">‚úÖ Adicionada</span>
                <% if artist_song.letra.present? %>
                  <br><small style="color: #666;">Letra personalizada</small>
                <% end %>
              <% else %>
                <span style="color: orange;">‚ö†Ô∏è Apenas no set</span>
              <% end %>
            </td>
            <td>
              <%= button_to "Remover do SetList",
                    remover_musicas_artist_artist_set_path(artist, @artist_set),
                    method: :delete,
                    params: { song_ids: [song.id] },
                    style: "background-color: #dc3545; color: white; padding: 4px 8px; border: none; border-radius: 4px; cursor: pointer; font-size: 12px;",
                    confirm: "Remover '#{song.name}' do set?",
                    local: true %>

              <% if artist_song %>
                <%= link_to "Ver Letra", letra_artist_song_path(artist_song),
                    style: "background-color: #0056b3; color: white; padding: 4px 8px; text-decoration: none; border-radius: 4px; font-size: 12px; margin-left: 5px;" %>

                <%= link_to "Editar Letra", edit_letra_artist_song_path(artist_song, set_id: @artist_set.id),
                      style: "background-color: #28a745; color: white; padding: 4px 8px; text-decoration: none; border-radius: 4px; font-size: 12px; margin-left: 5px;" %>

                <%= link_to "Editar M√∫sica", edit_musica_artist_song_path(artist_song, set_id: @artist_set.id),
                      style: "background-color: #6f42c1; color: white; padding: 4px 8px; text-decoration: none; border-radius: 4px; font-size: 12px; margin-left: 5px;",
                      title: "Editar dura√ß√£o e arquivos de m√≠dia" %>
              <% end %>
            </td>
          </tr>
        <% end %>
      </tbody>
    </table>
  </div>
<% else %>
  <p style="color: gray; font-style: italic;">
    <%= params[:search_set].present? ? "Nenhuma m√∫sica encontrada no set." : "Nenhuma m√∫sica no set ainda." %>
  </p>
<% end %>

<!-- EXPORTAR XML -->
<% if @songs.present? %>
  <div style="margin-top: 15px;">
    <%= link_to "Gerar XML",
        generate_xml_artist_artist_set_path(artist, @artist_set),
        method: :get,
        style: "background-color: #6f42c1; color: white; padding: 8px 16px; text-decoration: none; border-radius: 4px; font-size: 14px; display: inline-block;",
        title: "Gerar arquivo #{@artist_set.set_list_name}.xml" %>
  </div>
<% end %>

<hr>

<!-- SE√á√ÉO 2: ADICIONAR M√öSICAS DO BANCO -->
<h2>Adicionar M√∫sicas ao Setlist</h2>

<%= form_with url: show_sets_pub_artist_artist_set_path(artist, @artist_set), method: :get, local: true do %>
  <%= label_tag :query, "Buscar m√∫sica" %>
  <%= text_field_tag :query, params[:query] %>
  <%= submit_tag "Buscar", role: "button" %>
<% end %>

<% if @all_songs.present? %>
  <h3>
    <%= params[:query].present? ? "M√∫sicas encontradas (#{@all_songs.count})" : "Todas as m√∫sicas dispon√≠veis (#{@all_songs.count})" %>
  </h3>

  <!-- Ordena√ß√£o client-side para lista de todas as m√∫sicas -->
  <div style="margin-bottom:8px;">
    <label for="sort-all-songs" style="margin-right:8px;">Ordenar por:</label>
    <select id="sort-all-songs" style="padding:4px 8px;">
      <option value="inserted_all">Ordem de inser√ß√£o</option>
      <option value="name_asc_all">M√∫sica (A ‚Üí Z)</option>
      <option value="name_desc_all">M√∫sica (Z ‚Üí A)</option>
      <option value="band_asc_all">Banda (A ‚Üí Z)</option>
      <option value="band_desc_all">Banda (Z ‚Üí A)</option>
    </select>
  </div>

  <%= form_with url: adicionar_musicas_artist_artist_set_path(artist, @artist_set),
      method: :post, local: true, id: "multiple-songs-form" do |form| %>

    <div>
      <button type="button" id="select-all-btn" style="background-color: #007bff; color: white; padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer; margin-right: 10px;">Selecionar Todas</button>
      <button type="button" id="deselect-all-btn" style="background-color: #6c757d; color: white; padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer; margin-right: 10px;">Desmarcar Todas</button>
      <button type="button" id="select-available-btn" style="background-color: #ffc107; color: white; padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer; margin-right: 10px;">Selecionar Apenas Dispon√≠veis</button>

      <%= form.submit "Inserir M√∫sicas Selecionadas",
          id: "submit-selected-btn",
          style: "background-color: #28a745; color: white; padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer;",
          confirm: "Adicionar m√∫sicas selecionadas ao set?" %>

      <span id="selected-count" style="margin-left: 10px; font-weight: bold; color: #007bff;">0 m√∫sicas selecionadas</span>
    </div>

    <div style="max-height: 400px; overflow-y: auto; border: 1px solid #ccc; margin-top:8px;">
      <table id="all-songs-table">
        <thead>
          <tr>
            <th style="width: 40px;"><input type="checkbox" id="select-all-checkbox" title="Selecionar/Desmarcar todas"></th>
            <th>M√∫sica</th>
            <th>Banda</th>
            <th>Status</th>
            <th>A√ß√£o Individual</th>
          </tr>
        </thead>
        <tbody>
          <% @all_songs.each_with_index do |song, idx| %>
            <% is_in_set = @song_ids_in_set&.include?(song.id) %>
            <% artist_song = @artist_songs_map ? @artist_songs_map[song.id] : artist.artist_songs.find_by(song: song) %>
            <tr class="<%= 'already-in-set' if is_in_set %>"
                data-name="<%= song.name.to_s.downcase %>"
                data-band="<%= song.band.to_s.downcase %>"
                data-index="<%= idx %>">
              <td>
                <input type="checkbox"
                       name="song_ids[]"
                       value="<%= song.id %>"
                       class="song-checkbox <%= 'available-song' unless is_in_set %>"
                       data-song-name="<%= song.name %>"
                       data-in-set="<%= is_in_set %>"
                       <%= 'disabled' if is_in_set %> >
              </td>
              <td><span class="<%= 'text-muted' if is_in_set %>"><%= song.name %></span></td>
              <td><%= song.band %></td>
              <td>
                <% if artist_song %>
                  <span style="color: #6c757d;">No Banco</span>
                <% else %>
                  <span style="color: orange;">Adicionar</span>
                <% end %>
              </td>
              <td>
                <% unless is_in_set %>
                  <%= button_to "Adicionar", adicionar_musicas_artist_artist_set_path(artist, @artist_set),
                        method: :post,
                        params: { song_ids: [song.id] },
                        style: "background-color: #28a745; color: white; padding: 4px 8px; border: none; border-radius: 4px; cursor: pointer; font-size: 12px;",
                        local: true %>
                <% else %>
                  <span style="color: #ccc; font-size: 12px;">-</span>
                <% end %>
              </td>
            </tr>
          <% end %>
        </tbody>
      </table>
    </div>

  <% end %>
<% else %>
  <p>Use a busca acima para encontrar m√∫sicas.</p>
<% end %>

<hr>

<div>
  <%= button_to "Duplicar", duplicate_artist_artist_set_path(artist, @artist_set),
      method: :post,
      style: "background-color: #6c757d; color: white; padding: 6px 12px; border: none; border-radius: 4px; cursor: pointer; font-size: 12px;",
      confirm: "Duplicar setlist '#{@artist_set.set_list_name}'?" %>

<br>

  <%= button_to "Deletar Setlist", artist_artist_set_path(artist, @artist_set),
      method: :delete,
      style: "background-color: #dc3545; color: white; padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer;",
      confirm: "Tem certeza que deseja deletar este set?" %>
</div>

<!-- JAVASCRIPT UNIFICADO -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  // ---------- Sele√ß√£o em massa e contador ----------
  const selectedCountSpan = document.getElementById('selected-count');
  const submitBtn = document.getElementById('submit-selected-btn');
  const selectAllBtn = document.getElementById('select-all-btn');
  const deselectAllBtn = document.getElementById('deselect-all-btn');
  const selectAvailableBtn = document.getElementById('select-available-btn');
  const selectAllCheckbox = document.getElementById('select-all-checkbox');

  function allSongCheckboxes() {
    return Array.from(document.querySelectorAll('.song-checkbox'));
  }
  function availableSongCheckboxes() {
    return Array.from(document.querySelectorAll('.song-checkbox.available-song'));
  }

  function updateSelectedCount() {
    const count = document.querySelectorAll('.song-checkbox:checked').length;
    if (selectedCountSpan) {
      selectedCountSpan.textContent = `${count} m√∫sica${count !== 1 ? 's' : ''} selecionada${count !== 1 ? 's' : ''}`;
    }
    if (submitBtn) {
      submitBtn.disabled = count === 0;
      submitBtn.style.opacity = count === 0 ? '0.5' : '1';
    }
  }

  // event delegation: listen changes on container for dynamic robustness
  document.addEventListener('change', function(e) {
    if (e.target && e.target.classList && e.target.classList.contains('song-checkbox')) {
      updateSelectedCount();
    }
  });

  if (selectAllBtn) {
    selectAllBtn.addEventListener('click', function() {
      allSongCheckboxes().forEach(cb => { if (!cb.disabled) cb.checked = true; });
      updateSelectedCount();
    });
  }
  if (deselectAllBtn) {
    deselectAllBtn.addEventListener('click', function() {
      allSongCheckboxes().forEach(cb => cb.checked = false);
      updateSelectedCount();
    });
  }
  if (selectAvailableBtn) {
    selectAvailableBtn.addEventListener('click', function() {
      availableSongCheckboxes().forEach(cb => { if (!cb.disabled) cb.checked = true; });
      updateSelectedCount();
    });
  }
  if (selectAllCheckbox) {
    selectAllCheckbox.addEventListener('change', function() {
      const checked = this.checked;
      availableSongCheckboxes().forEach(cb => { if (!cb.disabled) cb.checked = checked; });
      updateSelectedCount();
    });
  }

  // Inicializa contador em carga
  updateSelectedCount();

  // ---------- Ordena√ß√£o client-side gen√©rica ----------
  function sortTableRows(tableId, criterion, direction) {
    const table = document.getElementById(tableId);
    if (!table) return;
    const tbody = table.tBodies[0];
    const rows = Array.from(tbody.querySelectorAll('tr'));

    let sorted = rows.slice();

    if (criterion === 'inserted' || criterion === 'inserted_all') {
      sorted.sort((a, b) => (Number(a.dataset.index) || 0) - (Number(b.dataset.index) || 0));
    } else if (criterion === 'name') {
      sorted.sort((a, b) => {
        const av = (a.dataset.name || '');
        const bv = (b.dataset.name || '');
        return av.localeCompare(bv, undefined, { sensitivity: 'base' }) * (direction === 'asc' ? 1 : -1);
      });
    } else if (criterion === 'band') {
      sorted.sort((a, b) => {
        const av = (a.dataset.band || '');
        const bv = (b.dataset.band || '');
        return av.localeCompare(bv, undefined, { sensitivity: 'base' }) * (direction === 'asc' ? 1 : -1);
      });
    }

    // Reaplica ordena√ß√£o no DOM mantendo event listeners (nodes s√£o movidos)
    sorted.forEach(r => tbody.appendChild(r));
  }

  // ---------- Persist√™ncia da ordena√ß√£o (localStorage) ----------
  // Chaves de armazenamento
  const KEY_SORT_CURRENT = 'mysetlist_sort_current';
  const KEY_SORT_ALL = 'mysetlist_sort_all';

  // Selects
  const sortCurrent = document.getElementById('sort-current-songs');
  const sortAll = document.getElementById('sort-all-songs');

  // Fun√ß√£o auxiliar para aplicar e salvar sele√ß√£o
  function applyAndSaveSort(selectEl, storageKey, tableId) {
    if (!selectEl) return;
    // Extrai crit√©rio e dire√ß√£o do value. Valores usados: inserted, name_asc, name_desc, band_asc, band_desc, etc.
    function applyValue(val) {
      if (!val) return;
      const parts = val.split('_');
      const base = parts[0]; // 'name'|'band'|'inserted' or 'inserted' + 'all' handled below
      let direction = 'asc';
      if (parts.length > 1 && parts[1] === 'desc') direction = 'desc';
      // map 'name_asc' -> criterion 'name'
      // for inserted_all/name_asc_all etc. we'll pass tableId already set by caller
      if (base === 'inserted') {
        sortTableRows(tableId, 'inserted', 'asc');
      } else {
        sortTableRows(tableId, base, direction);
      }
    }

    selectEl.addEventListener('change', function() {
      const val = this.value;
      try { localStorage.setItem(storageKey, val); } catch(e) { /* ignore storage errors */ }
      applyValue(val);
    });

    // Inicial: preferir param (servidor) quando presente, sen√£o localStorage, sen√£o default (inserted)
    // Os valores vindos do servidor s√£o expostos via atributos data-params abaixo.
    const serverParam = selectEl.dataset.serverValue || '';
    const saved = (function() { try { return localStorage.getItem(storageKey); } catch(e) { return null; } })();
    const initial = (serverParam && serverParam.length > 0) ? serverParam : (saved || selectEl.value || 'inserted');
    // set value (se existir na lista) e aplicar
    if (Array.from(selectEl.options).some(o => o.value === initial)) {
      selectEl.value = initial;
    }
    // Apply after a short timeout to ensure table exists in DOM
    setTimeout(() => applyValue(selectEl.value), 10);
  }

  // Hooks para selects de ordena√ß√£o (mantendo comportamento anterior)
  if (sortCurrent) {
    // exp√µe valor do params[:sort] (se houver) no atributo data-server-value para que JS possa prioriz√°-lo
    // (o ERB abaixo injeta o valor do params[:sort] de forma segura)
    // nota: se params[:sort] estiver vazio, data-server-value ser√° string vazia
    sortCurrent.dataset.serverValue = "<%= j params[:sort].to_s %>";
    applyAndSaveSort(sortCurrent, KEY_SORT_CURRENT, 'current-songs-table');

    // tamb√©m preservar o comportamento existente de mapear valores com sufixos name_asc, etc.
    sortCurrent.addEventListener('change', function() {
      const val = this.value;
      if (val === 'inserted') sortTableRows('current-songs-table', 'inserted', 'asc');
      if (val === 'name_asc') sortTableRows('current-songs-table', 'name', 'asc');
      if (val === 'name_desc') sortTableRows('current-songs-table', 'name', 'desc');
      if (val === 'band_asc') sortTableRows('current-songs-table', 'band', 'asc');
      if (val === 'band_desc') sortTableRows('current-songs-table', 'band', 'desc');
    });
  }

  if (sortAll) {
    // como n√£o usamos params[:sort_all] no servidor atualmente, deixamos vazio ou use outra param se preferir
    sortAll.dataset.serverValue = "<%= j params[:sort_all].to_s %>";
    applyAndSaveSort(sortAll, KEY_SORT_ALL, 'all-songs-table');

    sortAll.addEventListener('change', function() {
      const val = this.value;
      if (val === 'inserted_all') sortTableRows('all-songs-table', 'inserted_all', 'asc');
      if (val === 'name_asc_all') sortTableRows('all-songs-table', 'name', 'asc');
      if (val === 'name_desc_all') sortTableRows('all-songs-table', 'name', 'desc');
      if (val === 'band_asc_all') sortTableRows('all-songs-table', 'band', 'asc');
      if (val === 'band_desc_all') sortTableRows('all-songs-table', 'band', 'desc');
    });
  }

  // Observa√ß√£o: se houver a√ß√µes que redirecionam (ex.: adicionar/remover com local: true ainda recarrega a p√°gina),
  // a sele√ß√£o ser√° reaplicada na pr√≥xima carga a partir do localStorage (ou param enviado pelo servidor).
});
</script>