<!-- =========================== -->
<!-- SE√á√ÉO: MENSAGENS DE FEEDBACK -->
<!-- =========================== -->
<!-- Exibe notice/alert vindos do controller -->
<p style="color: green"><%= notice %></p>
<p style="color: red"><%= alert %></p>

<!-- =========================== -->
<!-- SE√á√ÉO: CABE√áALHO DO SET E ARTISTA -->
<!-- =========================== -->
<div>
  <!-- T√≠tulo principal e nome do set atual -->
  <h1>üåê Buscar e Inserir da Web</h1>
  <h2><%= @artist_set.set_list_name %></h2>
</div>

<!-- Link de navega√ß√£o para a p√°gina de sets do artista -->
<div>
  <%= link_to "Voltar para Setlists", artist_path(@artist_set.artist), role: "button" %>
</div>

<hr>

<!-- ========================================= -->
<!-- SE√á√ÉO 1: M√öSICAS ATUALMENTE NO SET -->
<!-- ========================================= -->
<!-- T√≠tulo com contador din√¢mico de m√∫sicas no set -->
<h2>M√∫sicas no Setlist (<%= @songs.count %>)</h2>

<!-- FUNCIONALIDADE: Busca espec√≠fica dentro do set atual -->
<%= form_with url: show_sets_pub_artist_artist_set_path(@artist_set.artist, @artist_set), method: :get, local: true do %>
  <%= label_tag :search_set, "Buscar m√∫sicas no set" %>
  <!-- Campo de busca que filtra apenas m√∫sicas j√° adicionadas ao set -->
  <%= text_field_tag :search_set, params[:search_set] %>
  <%= submit_tag "Buscar", role: "button" %>
<% end %>

<br>

<!-- CONDICIONAL: S√≥ exibe tabela se houver m√∫sicas no set -->
<% if @songs.present? %>

  <%# Precarrega mapa de artist_songs para evitar N+1 queries %>
  <% artist_songs_map = @artist.artist_songs.where(song_id: @songs.map(&:id)).index_by(&:song_id) %>

  <!-- Container com scroll vertical para tabelas grandes -->
  <div style="max-height: 400px; overflow-y: auto; border: 1px solid #ccc;">
    <!-- id adicionado para permitir reaplicar ordena√ß√£o salva (vinda de show_sets_pub) -->
    <table id="current-songs-table">
      <thead>
        <tr>
          <th>M√∫sica</th>
          <th>Banda</th>
          <th>Dura√ß√£o</th>
          <th>Status</th>
          <th>A√ß√µes</th>
        </tr>
      </thead>
      <tbody>
        <!-- LOOP: Itera por cada m√∫sica no set atual, agora com √≠ndice e data-* para ordena√ß√£o client-side -->
        <% @songs.each_with_index do |song, idx| %>
          <% artist_song = artist_songs_map[song.id] %>
          <tr data-name="<%= song.name.to_s.downcase %>"
              data-band="<%= song.band.to_s.downcase %>"
              data-index="<%= idx %>">
            <!-- COLUNA 1: Nome da m√∫sica em negrito -->
            <td><strong><%= song.name %></strong></td>
            
            <!-- COLUNA 2: Nome da banda -->
            <td><%= song.band %></td>

            <!-- ‚úÖ NOVA COLUNA: DURA√á√ÉO -->
            <td>
              <% if artist_song&.duracao.present? %>
                <span style="color: #6c757d;"><%= artist_song.duracao %></span>
              <% else %>
                <span style="color: #ccc; font-size: 12px;">-</span>
              <% end %>
            </td>
            
            <!-- COLUNA 3: Status da m√∫sica -->
            <td>
              <% if artist_song %>
                <!-- M√∫sica j√° est√° no repert√≥rio geral do artista -->
                <span style="color: green;">‚úÖ Adicionada</span>
                <!-- Indica se h√° letra personalizada -->
                <% if artist_song.letra.present? %>
                  <br><small style="color: #666;">Letra personalizada</small>
                <% end %>
              <% else %>
                <!-- M√∫sica s√≥ existe no set, n√£o no repert√≥rio geral -->
                <span style="color: orange;">‚ö†Ô∏è Apenas no set</span>
              <% end %>
            </td>
            
            <!-- COLUNA 4: Bot√µes de a√ß√£o -->
            <td>
              <!-- BOT√ÉO: Remover m√∫sica do set -->
              <%= button_to "Remover do Set", remover_musicas_artist_artist_set_path(@artist_set.artist, @artist_set), 
                  method: :delete, 
                  params: { song_ids: [song.id] },
                  style: "background-color: #dc3545; color: white; padding: 4px 8px; border: none; border-radius: 4px; cursor: pointer; font-size: 12px;",
                  confirm: "Remover '#{song.name}' do set?",
                  local: true %>
                  
              <!-- BOT√ÉO: Ver letra (s√≥ aparece se m√∫sica estiver no repert√≥rio) -->
              <% if artist_song %>
                <%= link_to "Ver Letra", letra_artist_song_path(artist_song),
                    style: "background-color: #0056b3; color: white; padding: 4px 8px; text-decoration: none; border-radius: 4px; font-size: 12px; margin-left: 5px;" %>
              <% end %>
              
              <!-- BOT√ÉO: Editar letra (s√≥ aparece se m√∫sica estiver no repert√≥rio) -->
              <% if artist_song %>
                <%= link_to "Editar Letra", 
                    edit_letra_artist_song_path(artist_song, set_id: @artist_set.id), 
                    style: "background-color: #28a745; color: white; padding: 4px 8px; text-decoration: none; border-radius: 4px; font-size: 12px; margin-left: 5px;" %>
              <% end %>

              <!-- ‚úÖ NOVO BOT√ÉO: Editar M√∫sica (dura√ß√£o, arquivos de m√≠dia) -->
              <% if artist_song %>
                <%= link_to "Editar M√∫sica", 
                    edit_musica_artist_song_path(artist_song, set_id: @artist_set.id), 
                    style: "background-color: #6f42c1; color: white; padding: 4px 8px; text-decoration: none; border-radius: 4px; font-size: 12px; margin-left: 5px;",
                    title: "Editar dura√ß√£o e arquivos de m√≠dia" %>
              <% end %>
            </td>
          </tr>
        <% end %>
      </tbody>
    </table>
  </div>
<% else %>
  <!-- MENSAGEM: Quando n√£o h√° m√∫sicas no set ou busca n√£o retorna resultados -->
  <p style="color: gray; font-style: italic;">
    <%= params[:search_set].present? ? "Nenhuma m√∫sica encontrada no set." : "Nenhuma m√∫sica no set ainda." %>
  </p>
<% end %>

<hr>

<!-- =========================== -->
<!-- SE√á√ÉO: BUSCA NO MUSICBRAINZ (WEB) -->
<!-- =========================== -->
<div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
  <h3>Buscar no MusicBrainz</h3>
  
  <!-- FORM: envia consulta ao action que consulta MusicBrainz -->
  <%= form_with url: buscar_musicbrainz_artist_artist_set_path(@artist_set.artist, @artist_set), 
      method: :post, local: true do %>
      <!-- Campo de busca principal -->
      <%= text_field_tag :query, @search_query, 
          placeholder: "Digite nome da m√∫sica, artist, √°lbum...", 
          style: "width: 100%; padding: 12px; font-size: 16px; border: 1px solid #ccc; border-radius: 4px; margin-bottom: 10px;" %>

      <!-- Bot√£o grande que submete a busca ao servidor -->
      <%= submit_tag "Buscar no MusicBrainz", 
          style: "background-color: #dc3545; color: white; padding: 24px; border: none; border-radius: 8px; cursor: pointer; font-size: 16px; width: 100%;" %>

      <small style="color: #666; display: block; margin-top: 8px;">
        üí° Busque por m√∫sica, artist, √°lbum ou qualquer termo relacionado
      </small>
  <% end %>
</div>

<!-- =========================== -->
<!-- SE√á√ÉO: RESULTADOS DO MUSICBRAINZ -->
<!-- =========================== -->
<!-- Exibe resultados quando houver retornos da API -->
<% if @musicbrainz_results.any? %>
  <% 
    # Evita N+1: monta mapa de m√∫sicas existentes (por t√≠tulo + artista) e mapa de artist_songs
    mb_keys = @musicbrainz_results.map { |r| [r['title'].to_s.strip, r['artist'].to_s.strip] }.uniq
    mb_titles = mb_keys.map(&:first)
    mb_artists = mb_keys.map(&:last)
    existing_songs = Song.where(name: mb_titles, band: mb_artists)
    existing_map = existing_songs.index_by { |s| "#{s.name.to_s.strip}||#{s.band.to_s.strip}" }
    artist_song_map_for_existing = @artist.artist_songs.where(song_id: existing_songs.map(&:id)).index_by(&:song_id)
  %>

  <div style="background-color: #e8f5e8; padding: 20px; border-radius: 8px; margin: 20px 0;">
    <h3>Resultados do MusicBrainz (<%= @musicbrainz_results.count %>)</h3>
    
    <!-- FORM: permite selecionar m√∫ltiplos resultados para adicionar ao set -->
    <%= form_with url: adicionar_musicas_web_artist_artist_set_path(@artist_set.artist, @artist_set), 
        method: :post, local: true, id: "musicbrainz-form" do |form| %>
      <div style="margin-bottom: 15px;">
        <!-- Controles de sele√ß√£o em massa e bot√£o de submiss√£o -->
        <button type="button" id="select-all-mb-btn" 
                style="background-color: #007bff; color: white; padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer; margin-right: 10px;">Selecionar Todas</button>
        <button type="button" id="deselect-all-mb-btn" 
                style="background-color: #6c757d; color: white; padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer; margin-right: 10px;">Desmarcar Todas</button>
        <%= form.submit "Adicionar Selecionadas ao Set", 
            id: "submit-mb-btn", 
            style: "background-color: #28a745; color: white; padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer;",
            confirm: "Adicionar m√∫sicas selecionadas do MusicBrainz?" %>
        <span id="mb-selected-count" style="margin-left: 10px; font-weight: bold; color: #007bff;">0 selecionadas</span>
      </div>

      <!-- Tabela com resultados detalhados (dura√ß√£o, artista, √°lbum, ano, status) -->
      <div style="max-height: 500px; overflow-y: auto; border: 1px solid #ccc;">
        <table>
          <thead>
            <tr>
              <th style="width: 40px;">
                <!-- Checkbox mestre para selecionar/desmarcar todas as dispon√≠veis -->
                <input type="checkbox" id="select-all-mb-checkbox" title="Selecionar/Desmarcar todas">
              </th>
              <th>M√∫sica</th>
              <th>Artista</th>
              <th>√Ålbum</th>
              <th>Ano</th>
              <th>Status</th>
            </tr>
          </thead>
          <tbody>
            <!-- LOOP: cada resultado da API -->
            <% @musicbrainz_results.each_with_index do |result, index| %>
              <% key = "#{result['title'].to_s.strip}||#{result['artist'].to_s.strip}" %>
              <% existing_song = existing_map[key] %>
              <% is_in_set = existing_song && (@song_ids_in_set ? @song_ids_in_set.include?(existing_song.id) : @songs.include?(existing_song)) %>
              <% artist_song = existing_song ? artist_song_map_for_existing[existing_song.id] : nil %>
              <tr class="<%= 'already-exists' if existing_song %>">
                <td>
                  <!-- Checkbox individual; desabilitado se j√° estiver no set -->
                  <input type="checkbox" 
                         name="selected_songs[]" 
                         value="<%= result.to_json %>" 
                         class="mb-song-checkbox <%= 'available-mb-song' unless is_in_set %>"
                         data-song-name="<%= result['title'] %>"
                         data-in-set="<%= is_in_set %>"
                         <%= 'disabled' if is_in_set %> >
                </td>
                <td>
                  <strong><%= result['title'] %></strong>
                  <% if result['duration'] %>
                    <br><small style="color: #6c757d;">‚è±Ô∏è <%= result['duration'] %></small>
                  <% end %>
                </td>
                <td><%= result['artist'] %></td>
                <td><%= result['album'] %></td>
                <td><%= result['year'] %></td>  
                <td>
                  <!-- Indica se j√° existe no banco, no set ou √© nova -->
                  <% if is_in_set %>
                    <span style="color: green; font-weight: bold;">‚úÖ No Setlist</span>
                  <% elsif existing_song %>
                    <span style="color: #6c757d;">J√° no Banco</span>
                  <% else %>
                    <span style="color: orange;">Nova</span>
                  <% end %>
                  <% if artist_song %>
                    <br><span style="color: #6c757d; font-size: 12px;">J√° vinculada ao artista</span>
                  <% end %>
                </td>
              </tr>
            <% end %>
          </tbody>
        </table>
      </div>
    <% end %>
  </div>
<% end %>

<hr>

<!-- =========================== -->
<!-- SE√á√ÉO: A√á√ïES DESTRUTIVAS -->
<!-- =========================== -->
<!-- Bot√£o que deleta o setlist inteiro do artista -->
<div>  
  <%= button_to "Deletar Setlist", 
      artist_artist_set_path(@artist_set.artist, @artist_set), 
      method: :delete,
      style: "background-color: #dc3545; color: white; padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer;",
      confirm: "Tem certeza que deseja deletar este set?" %>
</div>

<!-- =========================== -->
<!-- SE√á√ÉO: JAVASCRIPT - CONTROLE DE CHECKBOXES E APLICA√á√ÉO DE ORDENA√á√ÉO SALVA -->
<!-- =========================== -->
<!-- Script para gerenciar sele√ß√£o em massa e contador de selecionadas -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  // MB selection controls
  const selectAllMbBtn = document.getElementById('select-all-mb-btn');
  const deselectAllMbBtn = document.getElementById('deselect-all-mb-btn');
  const selectAllMbCheckbox = document.getElementById('select-all-mb-checkbox');
  const mbSelectedCountSpan = document.getElementById('mb-selected-count');
  const submitMbBtn = document.getElementById('submit-mb-btn');

  const mbSongCheckboxes = Array.from(document.querySelectorAll('.mb-song-checkbox') || []);
  const availableMbSongCheckboxes = Array.from(document.querySelectorAll('.mb-song-checkbox.available-mb-song') || []);

  // Safe-guard: se n√£o h√° resultados, n√£o precisa continuar
  if (mbSongCheckboxes.length === 0) {
    if (submitMbBtn) submitMbBtn.disabled = true;
  }

  // Atualiza contador de m√∫sicas selecionadas (ativa/desativa bot√£o de submit)
  function updateMbSelectedCount() {
    const checkedBoxes = document.querySelectorAll('.mb-song-checkbox:checked');
    const count = checkedBoxes.length;
    if (mbSelectedCountSpan) mbSelectedCountSpan.textContent = `${count} selecionada${count !== 1 ? 's' : ''}`;
    
    if (submitMbBtn) {
      submitMbBtn.disabled = count === 0;
      submitMbBtn.style.opacity = count === 0 ? '0.5' : '1';
    }
  }

  // Associa evento change a cada checkbox individual
  mbSongCheckboxes.forEach(checkbox => {
    checkbox.addEventListener('change', updateMbSelectedCount);
  });

  // Seleciona todas as m√∫sicas (exceto as desabilitadas)
  if (selectAllMbBtn) {
    selectAllMbBtn.addEventListener('click', function() {
      mbSongCheckboxes.forEach(checkbox => {
        if (!checkbox.disabled) checkbox.checked = true;
      });
      updateMbSelectedCount();
    });
  }

  // Desmarca todas as m√∫sicas
  if (deselectAllMbBtn) {
    deselectAllMbBtn.addEventListener('click', function() {
      mbSongCheckboxes.forEach(checkbox => checkbox.checked = false);
      updateMbSelectedCount();
    });
  }

  // Checkbox mestre controla apenas as dispon√≠veis
  if (selectAllMbCheckbox) {
    selectAllMbCheckbox.addEventListener('change', function() {
      const isChecked = this.checked;
      availableMbSongCheckboxes.forEach(checkbox => { checkbox.checked = isChecked; });
      updateMbSelectedCount();
    });
  }

  // Inicializa estado
  updateMbSelectedCount();

  // ----------------------
  // Reaplica ordena√ß√£o salva pela view show_sets_pub (localStorage)
  // ----------------------
  (function applySavedSortToCurrentTable() {
    try {
      const saved = localStorage.getItem('mysetlist_sort_current');
      if (!saved) return;
      const parts = saved.split('_'); // ex: name_asc ou inserted
      const base = parts[0];
      const dir = (parts[1] === 'desc') ? 'desc' : 'asc';

      function sortTableRows(tableId, criterion, direction) {
        const table = document.getElementById(tableId);
        if (!table) return;
        const tbody = table.tBodies[0];
        if (!tbody) return;
        const rows = Array.from(tbody.querySelectorAll('tr'));
        let sorted = rows.slice();

        if (criterion === 'inserted') {
          sorted.sort((a, b) => (Number(a.dataset.index) || 0) - (Number(b.dataset.index) || 0));
        } else if (criterion === 'name') {
          sorted.sort((a, b) => {
            const av = (a.dataset.name || '');
            const bv = (b.dataset.name || '');
            return av.localeCompare(bv, undefined, { sensitivity: 'base' }) * (direction === 'asc' ? 1 : -1);
          });
        } else if (criterion === 'band') {
          sorted.sort((a, b) => {
            const av = (a.dataset.band || '');
            const bv = (b.dataset.band || '');
            return av.localeCompare(bv, undefined, { sensitivity: 'base' }) * (direction === 'asc' ? 1 : -1);
          });
        }

        sorted.forEach(r => tbody.appendChild(r));
      }

      if (base === 'inserted') {
        sortTableRows('current-songs-table', 'inserted', 'asc');
      } else if (base === 'name') {
        sortTableRows('current-songs-table', 'name', dir);
      } else if (base === 'band') {
        sortTableRows('current-songs-table', 'band', dir);
      }
    } catch (e) {
      // n√£o bloquear a p√°gina em caso de erro
      console.warn('Erro ao aplicar ordena√ß√£o salva:', e);
    }
  })();

});
</script>