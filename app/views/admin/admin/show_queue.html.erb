
<div class="container mx-auto px-4 py-8"> 
  <div class="flex justify-between items-center mb-6">
    <h1 class="text-2xl font-bold">Fila do Evento <%= @event.description %></h1>
    <%= link_to "Voltar para Admin", admin_root_path, role: "button" %>
  </div>

  <hr>

  <div class="mb-4">
      <!-- Botão para pré-visualizar impressão do setlist -->
    <%= link_to "Pré-visualizar impressão do Setlist", 
      admin_imprimir_setlist_path(event_id: @event.id), 
      role: "button" %>

    <br>

      <!-- BOTÃO PARA IMPRIMIR LETRAS -->
    <%= link_to "Imprimir Letras das Músicas", 
      admin_imprimir_song_lyrics_path(event_id: @event.id), 
      role: "button", 
      class: "btn btn-secondary" %>
  </div>

  <hr>

<div style="zoom: 75%;">    
  <table>
    <thead>
      <tr>
        <th>Scr</th>
        <th>
          <h2 class="text-xl font-bold mb-2">Fila (Visíveis)</h2>
          <table class="min-w-full divide-y divide-gray-200">
            <thead>
              <tr>
                <th style="width:40px;">POS</th>
                <th style="width:80px;">Música</th>
                <th>Cantor</th>
                <th style="width:120px;">Ações</th>
              </tr>
            </thead>
            <tbody id="queue-table-body">
              <% @visible_queues.each do |queue| %>
                <% Rails.logger.debug "VISIBLE_QUEUE id=#{queue.id} db_pos=#{queue.position} performer=#{queue.performer&.name}" %>
                <tr data-id="<%= queue.id %>">
                  <!-- posição visual (será recalculada após drag / inserção) -->
                  <td class="queue-position"><%= queue.position %></td>
                  <td><%= queue.song.name %></td>
                  <td><%= queue.performer&.name || "Não informado" %></td>
                  <td>
                    <%= button_to "Ocultar",
                        hide_event_event_song_queue_path(@event, queue),
                        method: :patch,
                        data: { turbo_confirm: "Ocultar este item da fila?" },
                        class: "text-red-600 hover:text-red-900" %>
                  </td>
                </tr>
              <% end %>
            </tbody>
          </table>
        </th>
      </tr>
    </thead>
  </table>
</div>

    <h2 class="text-xl font-bold mt-8 mb-2">Itens Ocultos</h2>
    <table class="min-w-full divide-y divide-gray-200">
      <thead>
        <tr>
          <th style="width:80px;">Posição</th>
          <th>Música</th>
          <th>Cantor</th>
          <th>Status</th>
        </tr>
      </thead>
      <tbody>
        <% @hidden_queues.each do |queue| %>
          <tr>
            <td><%= queue.position %></td>
            <td><%= queue.song.name %></td>
            <td><%= queue.performer&.name || "Não informado" %></td>
            <td><span class="text-gray-400">Ocultado</span></td>
          </tr>
        <% end %>
      </tbody>
    </table>
  </div>


<script>
document.addEventListener('DOMContentLoaded', function() {
        
  const tbody      = document.getElementById('queue-table-body');
  const eventId    = '<%= @event.id %>';
  const storageKey = `queue-order-${eventId}`;

  function currentIds() {
    return Array.from(tbody.querySelectorAll('tr[data-id]')).map(r => parseInt(r.dataset.id));
  }

  function applyOrder(orderIds) {
    const rowsMap = {};
    tbody.querySelectorAll('tr[data-id]').forEach(r => rowsMap[r.dataset.id] = r);
    orderIds.forEach(id => {
      const row = rowsMap[id];
      if (row) tbody.appendChild(row);
    });
  }

  function renumberVisual() {
    Array.from(tbody.querySelectorAll('tr[data-id]')).forEach((row, idx) => {
      const cell = row.querySelector('.queue-position');
      if (cell) cell.textContent = idx + 1;
    });
  }

  function saveOrder(orderIds) {
    localStorage.setItem(storageKey, JSON.stringify(orderIds));
    // Sincroniza backend (persistir posições reais)
    fetch(`/admin/save_queue_order/${eventId}`, {
      method: 'POST',
      headers: {
        'Content-Type':'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      },
      body: JSON.stringify({ order_ids: orderIds })
    });
  }

  // Restaura ordem manual anterior e garante que novos itens (novos performers)
  // SEMPRE sejam adicionados ao final.
  function restoreOrInitialize() {
    const idsNow = currentIds();           // ordem do DB (já ordenada por position)
    const saved  = localStorage.getItem(storageKey);

    if (!saved) {
      // Primeira vez: salva ordem do DB
      saveOrder(idsNow);
      renumberVisual();
      return;
    }

    let savedIds;
    try {
      savedIds = JSON.parse(saved).map(Number).filter(Boolean);
    } catch(e) {
      localStorage.removeItem(storageKey);
      saveOrder(idsNow);
      renumberVisual();
      return;
    }

    // Remove IDs que não existem mais (deletados)
    savedIds = savedIds.filter(id => idsNow.includes(id));

    // Detecta novos (presentes no DB mas não no saved) → append ao final
    const newOnes = idsNow.filter(id => !savedIds.includes(id));
    if (newOnes.length > 0) {
      console.log('Novos itens detectados (append no fim):', newOnes);
      savedIds = savedIds.concat(newOnes); // garante novo performer NO FIM
    }

    applyOrder(savedIds);
    renumberVisual();
    saveOrder(savedIds);
  }

  function enableDrag() {
    let dragged = null;

    function attach(row) {
      row.draggable = true;
      row.style.cursor = 'move';

      row.addEventListener('dragstart', () => {
        dragged = row;
        row.style.opacity = '0.5';
      });
      row.addEventListener('dragend', () => {
        row.style.opacity = '';
        dragged = null;
        const newOrder = currentIds();
        renumberVisual();
        saveOrder(newOrder);
      });
      row.addEventListener('dragover', e => e.preventDefault());
      row.addEventListener('drop', e => {
        e.preventDefault();
        if (!dragged || dragged === row) return;
        const rect = row.getBoundingClientRect();
        const before = e.clientY < rect.top + rect.height / 2;
        if (before) tbody.insertBefore(dragged, row);
        else tbody.insertBefore(dragged, row.nextSibling);
      });
    }

    tbody.querySelectorAll('tr[data-id]').forEach(attach);
  }

  restoreOrInitialize();
  enableDrag();
});
</script>

<style>
  table { width:100%; border-collapse: collapse; }
  th, td { border:1px solid #ddd; padding:6px 8px; }
  th { background:#f5f5f5; }
  tbody tr:nth-child(even){ background:#fafafa; }
  tbody tr:hover { background:#eef; }
  .queue-position { text-align:center; font-weight:600; }
</style>
