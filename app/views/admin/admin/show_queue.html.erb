<!-- filepath: c:\DEV\MySetList\app\views\admin\admin\show_queue.html.erb -->
<div class="container mx-auto px-4 py-8">
  <div style="zoom: 50%;">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-2xl font-bold">Fila do Evento <%= @event.description %></h1>
      <%= link_to "Voltar para Admin", admin_root_path, 
          role: "button" %>
    </div>
    <hr>
    <div class="mb-4">
      <!-- Bot√£o para pr√©-visualizar impress√£o do setlist -->
      <%= link_to "Pr√©-visualizar impress√£o do Setlist", 
          admin_imprimir_setlist_path(event_id: @event.id), 
          role: "button" %>

      <br>

      <!-- BOT√ÉO PARA IMPRIMIR LETRAS -->
      <%= link_to "Imprimir Letras das M√∫sicas", 
          admin_imprimir_song_lyrics_path(event_id: @event.id), 
          role: "button", 
          class: "btn btn-secondary" %>
    </div>
    <table>
      <thead>
        <tr>
          <th>Scroll</th>
          <th> 
            <table class="min-w-full divide-y divide-gray-200">
              <thead>
                <tr>
                  <th>Posi√ß√£o</th>
                  <th>M√∫sicas</th>
                  <th>Cantor</th>
                  <th>A√ß√µes</th>
                </tr>
              </thead>
              <tbody id="queue-table-body">
                <% @visible_queues.each do |queue| %>
                 <!-- ‚úÖ LOG DETALHADO DE CADA QUEUE VIS√çVEL -->
                 <% Rails.logger.error "üìã VISIBLE QUEUE: Queue ID: #{queue.id} | Event ID: #{queue.event_id} | Song ID: #{queue.song_id} | Song Name: '#{queue.song.name}' | Position: #{queue.position} | Hidden: #{queue.hidden.inspect}" %>
                  <tr data-id="<%= queue.id %>">
                    <td><%= queue.position %></td>
                    <td><%= queue.song.name %></td>
                    <td>
                      <% if queue.performer_id.present? %>
                        <%= Performer.find_by(id: queue.performer_id)&.name || "Performer ##{queue.performer_id}" %>
                      <% else %>
                        <span style="color: #666;">N√£o informado</span>
                      <% end %>
                    </td>
                    <td>
                      <%= button_to "Ocultar",
                          hide_event_event_song_queue_path(@event, queue),
                          method: :patch,
                          data: { turbo_confirm: "Are you sure you want to hide this song from the queue?" },
                          class: "text-red-600 hover:text-red-900" %>
                    </td> 
                  </tr>
                <% end %>
              </tbody>
            </table>
            <!-- Lista de itens ocultos -->
            <h2 class="text-xl font-bold mt-8 mb-2">Itens Ocultos</h2>
            <table class="min-w-full divide-y divide-gray-200">
              <thead>
                <tr>
                  <th>Posi√ß√£o</th>
                  <th>M√∫sicas</th>
                  <th>Cantor</th>
                  <th>Status</th>
                </tr>
              </thead>
              <tbody>
                <% @hidden_queues.each do |queue| %>
                  <tr data-id="<%= queue.id %>">
                    <td><%= queue.position %></td>
                    <td><%= queue.song.name %></td>
                    <td>
                      <% if queue.performer_id.present? %>
                        <%= Performer.find_by(id: queue.performer_id)&.name || "Performer ##{queue.performer_id}" %>
                      <% else %>
                        <span style="color: #666;">N√£o informado</span>
                      <% end %>
                    </td>
                    <td><span class="text-gray-400">Ocultado</span></td>
                  </tr>
                <% end %>
              </tbody>
            </table>
          </th>
        </tr>
      </thead>
    </table>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const tbody = document.getElementById('queue-table-body');
  const eventId = '<%= @event.id %>';
  const storageKey = `queue-order-${eventId}`;
  
  // ‚úÖ NOVO: Pega ordem atual do banco de dados (DOM inicial)
  function getCurrentDOMOrder() {
    const rows = tbody.querySelectorAll('tr[data-id]');
    return Array.from(rows).map(row => parseInt(row.dataset.id));
  }
  
  // ‚úÖ Atualiza os n√∫meros das posi√ß√µes visualmente
  function updatePositions() {
    const rows = tbody.querySelectorAll('tr[data-id]');
    console.log('üìä Atualizando posi√ß√µes para', rows.length, 'linhas');
    
    rows.forEach((row, index) => {
      const positionCell = row.querySelector('td:first-child');
      const queueId = row.dataset.id;
      const songName = row.querySelector('td:nth-child(2)').textContent;
      
      if (positionCell) {
        const oldPosition = positionCell.textContent;
        const newPosition = index + 1;
        positionCell.textContent = newPosition;
        
        console.log(`üîÑ Queue ${queueId} (${songName}): posi√ß√£o ${oldPosition} ‚Üí ${newPosition}`);
      }
    });
  }
  
  // ‚úÖ MODIFICADO: S√≥ restaura se ordem salva for diferente da atual
  function restoreOrder() {
    const savedOrder = localStorage.getItem(storageKey);
    const currentOrder = getCurrentDOMOrder();
    
    console.log('üè¶ Ordem do banco (DOM inicial):', currentOrder);
    console.log('üíæ Ordem salva (localStorage):', savedOrder ? JSON.parse(savedOrder) : 'nenhuma');
    
    if (savedOrder) {
      try {
        const orderArray = JSON.parse(savedOrder);
        
        // ‚úÖ VERIFICA se ordem salva √© diferente da atual
        const isOrderDifferent = JSON.stringify(orderArray) !== JSON.stringify(currentOrder);
        
        if (isOrderDifferent) {
          console.log('üîÑ Aplicando ordem salva (diferente do banco)');
          
          const rows = Array.from(tbody.querySelectorAll('tr[data-id]'));
          
          // Ordena as linhas conforme a ordem salva
          orderArray.forEach((id, index) => {
            const row = rows.find(r => r.dataset.id === id.toString());
            if (row) {
              tbody.appendChild(row);
              console.log(`üìå Movendo Queue ${id} para posi√ß√£o visual ${index + 1}`);
            }
          });
          
          // ‚úÖ Atualiza posi√ß√µes ap√≥s restaurar ordem
          updatePositions();
          
          // ‚úÖ Sincroniza com o backend imediatamente
          syncWithBackend(orderArray);
        } else {
          console.log('‚úÖ Ordem salva igual √† do banco - mantendo como est√°');
          // ‚úÖ Atualiza localStorage com ordem atual
          localStorage.setItem(storageKey, JSON.stringify(currentOrder));
        }
      } catch(e) {
        console.error('‚ùå Erro ao restaurar ordem:', e);
        // ‚úÖ Remove localStorage corrompido
        localStorage.removeItem(storageKey);
      }
    } else {
      console.log('üìã Nenhuma ordem salva - usando ordem do banco');
      // ‚úÖ Salva ordem atual do banco no localStorage
      localStorage.setItem(storageKey, JSON.stringify(currentOrder));
    }
  }
  
  // ‚úÖ Salva a ordem atual
  function saveOrder() {
    const rows = tbody.querySelectorAll('tr[data-id]');
    const order = Array.from(rows).map(row => parseInt(row.dataset.id));
    
    console.log('üíæ Salvando nova ordem:', order);
    localStorage.setItem(storageKey, JSON.stringify(order));
    
    // ‚úÖ Atualiza posi√ß√µes visualmente
    updatePositions();
    
    // ‚úÖ Sincroniza com o backend
    syncWithBackend(order);
  }
  
  // ‚úÖ ROTA CORRETA: admin/events#save_queue_order  
  function syncWithBackend(orderArray) {
    return fetch(`/admin/save_queue_order/${eventId}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      },
      body: JSON.stringify({
        order_ids: orderArray
      })
    });
  }
  
  // ‚úÖ NOVO: Fun√ß√£o para resetar para ordem do banco
  window.resetToDBOrder = function() {
    console.log('üîÑ Resetando para ordem do banco de dados...');
    
    // Remove localStorage
    localStorage.removeItem(storageKey);
    
    // Recarrega a p√°gina para pegar ordem fresca do banco
    location.reload();
  };
  
  // ‚úÖ Fun√ß√£o global para sincronizar antes de gerar PDF
  window.syncBeforePDF = function() {
    console.log('üéµ Sincronizando ordem antes de gerar PDF...');
    const rows = tbody.querySelectorAll('tr[data-id]');
    const currentOrder = Array.from(rows).map(row => parseInt(row.dataset.id));
    
    // Salva no localStorage
    localStorage.setItem(storageKey, JSON.stringify(currentOrder));
    
    // Sincroniza com backend
    return fetch(`/admin/events/${eventId}/save_queue_order`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      },
      body: JSON.stringify({
        order_ids: currentOrder
      })
    })
    .then(response => response.json())
    .then(data => {
      console.log('üìã Sincroniza√ß√£o para PDF conclu√≠da:', data);
      return data.status === 'success';
    });
  };
  
  // ‚úÖ Torna a tabela orden√°vel (drag & drop)
  function makeSortable() {
    let draggedRow = null;
    
    tbody.querySelectorAll('tr[data-id]').forEach(row => {
      row.draggable = true;
      row.style.cursor = 'move';
      
      row.addEventListener('dragstart', function(e) {
        draggedRow = this;
        this.style.opacity = '0.5';
        console.log('üñ±Ô∏è Iniciando drag da Queue:', this.dataset.id);
      });
      
      row.addEventListener('dragend', function(e) {
        this.style.opacity = '';
        console.log('üñ±Ô∏è Finalizando drag da Queue:', this.dataset.id);
        draggedRow = null;
        saveOrder(); // Salva a nova ordem E atualiza posi√ß√µes
      });
      
      row.addEventListener('dragover', function(e) {
        e.preventDefault();
      });
      
      row.addEventListener('drop', function(e) {
        e.preventDefault();
        if (draggedRow && draggedRow !== this) {
          const draggedSong = draggedRow.querySelector('td:nth-child(2)').textContent;
          const targetSong = this.querySelector('td:nth-child(2)').textContent;
          
          console.log(`üîÑ Drop: "${draggedSong}" sobre "${targetSong}"`);
          
          const rect = this.getBoundingClientRect();
          const midpoint = rect.top + rect.height / 2;
          
          if (e.clientY < midpoint) {
            tbody.insertBefore(draggedRow, this);
            console.log('‚¨ÜÔ∏è Inserido ANTES');
          } else {
            tbody.insertBefore(draggedRow, this.nextSibling);
            console.log('‚¨áÔ∏è Inserido DEPOIS');
          }
          
          // ‚úÖ Atualiza posi√ß√µes imediatamente ap√≥s o drop
          updatePositions();
        }
      });
    });
    
    console.log('üñ±Ô∏è Drag & Drop habilitado para', tbody.querySelectorAll('tr[data-id]').length, 'linhas');
  }
  
  // ‚úÖ Inicializa com logs detalhados
  console.log('üöÄ Inicializando sistema de filas para Event ID:', eventId);
  restoreOrder();
  makeSortable();
  
  // ‚úÖ Salva ordem antes de sair da p√°gina
  window.addEventListener('beforeunload', saveOrder);
});
</script>
